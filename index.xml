<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TechTeco</title><link>https://techteco.github.io/</link><description>Recent content on TechTeco</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Tue, 02 Apr 2019 21:53:00 +0900</lastBuildDate><atom:link href="https://techteco.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Macでmozjpegを使う</title><link>https://techteco.github.io/2019/04/02/mozjpeg/</link><pubDate>Tue, 02 Apr 2019 21:53:00 +0900</pubDate><guid>https://techteco.github.io/2019/04/02/mozjpeg/</guid><description>mozjpeg https://github.com/mozilla/mozjpeg
説明不要かと思いますが、mozillaプロジェクトのjpegエンコードです
ちなみに、オンラインツールでも提供されてます。
https://mozjpeg.codelove.de/
インストール macへのインストールはbrewコマンドでできます。
$ brew install mozjpeg 使い方 インストールしてもmozjpegというコマンドが使えるようになるわけではなく、
画像圧縮にはcjpegというコマンドを使います。
pathが通ってないですが、下記にインストールされてます。
$ /usr/local/Cellar/mozjpeg/3.3.1_1/bin/cjpeg 画像を圧縮する # 圧縮前サイズ $ ls -l sample.jpg | cut -d&amp;#39; &amp;#39; -f7 52611 # 圧縮品質80を指定 $ /usr/local/Cellar/mozjpeg/3.3.1_1/bin/cjpeg -optimize -quality 80 sample.jpg &amp;gt; sample80.jpg # 圧縮後サイズ $ ls -l sample80.jpg | cut -d&amp;#39; &amp;#39; -f8 32311 一括圧縮編(xargs) 事前にresizedフォルダを作成しておく
$ find . -name &amp;#39;*.jpg&amp;#39; -type f | sed &amp;#39;s!^.*/!!&amp;#39; | xargs -I% /usr/local/Cellar/mozjpeg/3.3.1_1/bin/cjpeg -optimize -quality 80 -outfile &amp;#34;resized/%&amp;#34; &amp;#34;%&amp;#34; ヘルプ $ /usr/local/Cellar/mozjpeg/3.</description></item><item><title>Macのsipsコマンドの使い方メモ</title><link>https://techteco.github.io/2019/04/02/sips/</link><pubDate>Tue, 02 Apr 2019 21:53:00 +0900</pubDate><guid>https://techteco.github.io/2019/04/02/sips/</guid><description>sipsコマンド sipsは**scriptable image processing system.**の略です。
This tool is used to query or modify raster image files and ColorSync ICC profiles.
Its functionality can also be used through the &amp;ldquo;Image Events&amp;rdquo; AppleScript suite.
簡単な使い方 画像の情報を参照 スマフォで撮影した画像を見てみるとこんな感じの情報が取得できました。
$ sips -g all sample.jpg /PATH/sample.jpg pixelWidth: 4608 pixelHeight: 2304 typeIdentifier: public.jpeg format: jpeg formatOptions: default dpiWidth: 72.000 dpiHeight: 72.000 samplesPerPixel: 3 bitsPerSample: 8 hasAlpha: no space: RGB profile: sRGB IEC61966-2.1 creation: 2018:08:04 09:39:37 make: XXXXXX model: XXXXXXXXXXXX software: XXXXXXXXXXXX 必要な項目だけ出力したい場合は、パラメータを指定すると可能です。</description></item><item><title>AWS CodeBuildをローカル環境で動かす</title><link>https://techteco.github.io/2018/09/19/aws-codebuild-local/</link><pubDate>Wed, 19 Sep 2018 19:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/09/19/aws-codebuild-local/</guid><description>AWS CodeBuildとは CodeBuildは使ったことはありましたが、検証が面倒くさいところがありました。
ビルド自体は動き出すとなかなか変更する機会がなく、今回ようやくローカル環境でのテストを試すことになりました。
ちなみに、CodeBuildとは、
AWS CodeBuild とは
AWS CodeBuild はクラウドで動作する、完全マネージド型のビルドサービスです。AWS CodeBuild はソースコードをコンパイルし、単体テストを実行して、すぐにデプロイできるアーティファクトを生成します。AWS CodeBuild により、独自のビルドサーバーのプロビジョニング、管理、スケーリングが不要になります。Apache Maven、Gradle などの最も一般的なプログラミング言語とビルドツール用のパッケージ済みのビルド環境を提供します。AWS CodeBuild のビルド環境をカスタマイズして、独自のビルドツールを使用することもできます。AWS CodeBuild はピーク時のビルドリクエストに合わせて自動的にスケーリングします。
CodeBuildの使い方は、公式のリファレンスを見るとわかりやすく説明されています。
AWS CodeBuild のビルド仕様に関するリファレンス
AWS CodeBuild のビルド環境リファレンス
実行環境 $ sw_vers ProductName:	Mac OS X ProductVersion:	10.13.6 BuildVersion:	17G2307 $ docker -v Docker version 18.06.1-ce, build e68fc7a 準備 Announcing Local Build Support for AWS CodeBuild
Github aws/aws-codebuild-docker-images
を参考に進めます。
イントール $ git clone https://github.com/aws/aws-codebuild-docker-images.git build Docker image 今回は簡単な動作検証なので、ubuntu-baseを使って試します。
AWS CodeBuild に用意されている Docker イメージ</description></item><item><title>AWS SAM CLIを使ってlambdaのローカル開発</title><link>https://techteco.github.io/2018/08/31/aws-sam-cli/</link><pubDate>Fri, 31 Aug 2018 19:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/08/31/aws-sam-cli/</guid><description>AWS SAM CLIとは AWS SAM自体は以前の投稿でも書いているので割愛。
AWS SAM CLIは、もともとsam localと呼ばれていたものの進化版？のようですね。
sam localは何度かつかってましたが、sam cliになったのを機に再度整理する。
イントール 参考:SAM CLI のインストール
dockerとイントールに使われるpip(Pythonのパッケージ管理)が必要になるが、詳細は割愛。
$ pip install aws-sam-cli $ sam --version SAM CLI, version 0.6.0 参考サイトは0.3.0なので、少しずつ改善されているようですね。
sam initでサンプルを動かす Simple App (sam init) の作成
ここではgolangを使って試してみる。
$ sam init --runtime go [&amp;#43;] Initializing project structure... [SUCCESS] - Read sam-app/README.md for further instructions on how to proceed [*] Project initialization is now complete # こんなファイルが自動生成されます。 $ tree sam-app/ sam-app/ ├── Makefile ├── README.</description></item><item><title>LambdaのGolangでS3を操作する</title><link>https://techteco.github.io/2018/02/09/lambda-go-s3/</link><pubDate>Fri, 09 Feb 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/02/09/lambda-go-s3/</guid><description>やること S3に保存されたファイルを取得して、データを追記して保存する
S3上のファイル存在確認(ListObjectsV2)
ファイルが存在すれば、ファイル取得(GetObject)
追記してS3に保存(PutObject)
Lambdaの作成 さっそく
golang main.go package main import ( &amp;#34;bytes&amp;#34; &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws/awserr&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws/endpoints&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws/session&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/service/s3&amp;#34; ) func HandleRequest(ctx context.Context) (string, error) { var BUCKET = os.Getenv(&amp;#34;BUCKET&amp;#34;) var KEY = os.Getenv(&amp;#34;KEY&amp;#34;) svc := s3.New(session.New(), &amp;amp;aws.Config{ Region: aws.String(endpoints.ApNortheast1RegionID), }) // ファイルの存在確認 loo, errlo := svc.ListObjectsV2(&amp;amp;s3.ListObjectsV2Input{ Bucket: aws.String(BUCKET), Prefix: aws.String(KEY), }) if errlo != nil { if aerr, ok := errlo.(awserr.Error); ok { switch aerr.</description></item><item><title>LAWS OF UX というサイトの紹介</title><link>https://techteco.github.io/2018/01/31/laws-of-ux/</link><pubDate>Wed, 31 Jan 2018 16:30:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/31/laws-of-ux/</guid><description>Laws Of UX Laws Of UX
UXを考えるときに考慮するといいであろう法則がまとめられています。
サイトのデザインもきれいです。
Fitts’s Law Fitts’s Law
The time to acquire a target is a function of the distance to and size of the target.
翻訳すると
ターゲットを取得する時間はターゲットの距離とターゲットのサイズの関数です。
ターゲットまでの距離が長くなって、ターゲットの距離が小さくなればなるほで、時間がかかりますよ。ってことのようです。
Hick’s Law Hick’s Law
The time it takes to make a decision increases with the number and complexity of choices.
翻訳すると
決定を下すのに要する時間は、選択肢の数と複雑さとともに増加します。
選択肢はシンプルにしたほうがいいってことですね。
Jakob’s Law Jakob’s Law
Users spend most of their time on other sites. This means that users prefer your site to work the same way as all the other sites they already know.</description></item><item><title>Lambda(Golang)からAWS KMSを復号化する方法</title><link>https://techteco.github.io/2018/01/30/lambda-go-kms/</link><pubDate>Tue, 30 Jan 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/30/lambda-go-kms/</guid><description>KMSについては、AWS KMSの使い方を参考
環境構築 暗号化データ 暗号化する。ここでは、shared(alias)というkeyを使う。
※自分の環境に合わせて。
$ aws kms encrypt \ --key-id alias/shared \ --plaintext &amp;#34;I am seacret word&amp;#34; \ --output text \ --query CiphertextBlob ここで出力された値をLambdaの環境変数に渡します。
Lambda構築用のSAMテンプレート 参考はこちらのAWS SAMを使ってみるをご確認ください。
lambda-go-kms.yaml AWSTemplateFormatVersion : &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Description: KMS decrypt. Resources: KMSDecrypt: Type: AWS::Serverless::Function Properties: Handler: main Runtime: go1.x CodeUri: main.zip # KMSのDecrypt用のポリシー定義 Policies: - KMSDecryptPolicy: # 暗号化に使ったKeyID # aliasは対応していない KeyId: &amp;#34;01234567-0123-1234-1234-123456789012&amp;#34; Environment: Variables: # Encrypted: &amp;#34;ここに暗号化したCiphertextBlobの値&amp;#34; Golangのソースコード main.go package main import ( &amp;#34;context&amp;#34; &amp;#34;encoding/base64&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.</description></item><item><title>AWS Cloudformationでネットワークの基本設定</title><link>https://techteco.github.io/2018/01/29/cloudformation/</link><pubDate>Mon, 29 Jan 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/29/cloudformation/</guid><description>基本的な使い方 設定内容 ざっくりですが、こんな項目を設定します。詳細はCloudformationのテンプレートの内容を見てもらった方が早いです。
VPC設定 Internet Gateway設定 Subnetの設定 DHCP Optionの設定 Route Tableの設定 ACLの設定 ※設定値は参考までに。
テンプレート AWSTemplateFormatVersion: &amp;#34;2010-09-09&amp;#34; Description: &amp;#34;Basic Network Setting&amp;#34; Parameters: pramStackNamePrefic: Description: &amp;#34;Common stack name prefix&amp;#34; Type: String Default: &amp;#34;&amp;#34; Resources: VPC: Type: &amp;#34;AWS::EC2::VPC&amp;#34; Properties: CidrBlock: &amp;#34;192.168.0.0/16&amp;#34; InstanceTenancy: default EnableDnsSupport: true EnableDnsHostnames: true Tags: - Key: Name Value: !Join - &amp;#34;&amp;#34; - - !Ref pramStackNamePrefic - vpc igw: Type: &amp;#34;AWS::EC2::InternetGateway&amp;#34; Properties: Tags: - Key: Name Value: !Join - &amp;#34;&amp;#34; - - !</description></item><item><title>LambdaのGolangでSlackにメッセージを送る</title><link>https://techteco.github.io/2018/01/28/lambda-go-slack/</link><pubDate>Sun, 28 Jan 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/28/lambda-go-slack/</guid><description>Slackの設定 Incoming WebHooks Incoming WebHooksを使って、Lambdaからメッセージ送信をする。
詳細は割愛しますが、ドキュメント [Slack API] (https://api.slack.com/incoming-webhooks) をみると使い方は簡単です。
Slackの管理画面https://XXXXXXXX.slack.com/appsからIncoming WebHooksの設定を行い、Webhook URLが取得できたら、curlコマンドでテストしてみる。
$ curl -X POST -H &amp;#39;Content-type: application/json&amp;#39; \ --data &amp;#39;{&amp;#34;text&amp;#34;:&amp;#34;This is a line of text.\nAnd this is another one.&amp;#34;}&amp;#39; \ https://hooks.slack.com/services/000000000/000000000/XXXXXXXXXXXXXXXXXXXXXXXX こんな感じで送信されれば準備OK！
Lambdaの作成 golang Lambdaの環境変数からSlackのWebhook URLを取得する
main.go package main import ( &amp;#34;context&amp;#34; &amp;#34;os&amp;#34; slack &amp;#34;./slack&amp;#34; &amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34; ) func HandleRequest(ctx context.Context) (string, error) { var slackURL = os.Getenv(&amp;#34;slackURL&amp;#34;) // Get Environment Variables sl := slack.NewSlack(slackURL, &amp;#34;This is a line of text.</description></item><item><title>AWS SAMを使ってみる</title><link>https://techteco.github.io/2018/01/27/lambda-go-sample-sam/</link><pubDate>Sat, 27 Jan 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/27/lambda-go-sample-sam/</guid><description>AWS SAMとは Github : AWS Serverless Application Model (AWS SAM)
The goal of AWS SAM is to define a standard application model for serverless applications. This GitHub project is the starting point for AWS SAM, and contains general information, information about the model, and examples of common applications.
日本語訳
AWS SAMの目標は、サーバレスアプリケーション用の標準アプリケーションモデルを定義することです。 このGitHubプロジェクトは、AWS SAMの出発点であり、一般的な情報、モデルに関する情報、一般的なアプリケーションの例を含んでいます。
AWS::Serverless 変換
ここを見る限りだと、
AWS SAMはCloudformationの拡張で、最終的にはCloudformationのテンプレートに展開されるイメージ。
やること 基本的には、待望のAWS LambdaのGolang対応！ ここでやったことの、コンソールでの作業をコマンドベースでやろう！ということです。
サンプル Githubにサンプルがあるので、一番シンプルなhello_worldを参考にしてみる。
テンプレート lambda-go.yaml AWSTemplateFormatVersion : &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Description: lambda go sample application.</description></item><item><title>AWS KMSの使い方</title><link>https://techteco.github.io/2018/01/26/kms/</link><pubDate>Fri, 26 Jan 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/26/kms/</guid><description>AWS KMSとは AWS Key Management Service とは
AWS Key Management Service (AWS KMS) は、データの暗号化に使用される暗号化キーの作成と管理を容易にするマネージド型サービスです。AWS KMS は、Amazon Elastic Block Store (Amazon EBS)、Amazon Simple Storage Service (Amazon S3)、Amazon Redshift、Amazon Elastic Transcoder、Amazon WorkMail、Amazon Relational Database Service (Amazon RDS) などの他の AWS サービスと統合されており、ユーザーが管理する暗号化キーでのデータの暗号化を簡単にします。また AWS KMS は AWS CloudTrail とも統合されており、キーの使用ログを表示できるため、監査、規制、およびコンプライアンスの要求に応えるために役立ちます。
CloudformationでCMKを作成 CSK作成 AWS Key Management Service (AWS KMS) でカスタマーマスターキー (CMK) を作成します。
AWS::KMS::Key
定義ファイル key.yaml AWSTemplateFormatVersion: &amp;#34;2010-09-09&amp;#34; Description: &amp;#34;Cloudformation Sample : Create Sample KMS Key&amp;#34; Parameters: pTagKey: Type: String pTagValue: Type: String Resources: SampleKey: Type: &amp;#34;AWS::KMS::Key&amp;#34; Properties: Description: &amp;#34;A sample key&amp;#34; KeyPolicy: Version: &amp;#34;2012-10-17&amp;#34; Id: &amp;#34;key-default-1&amp;#34; Statement: - Sid: Enable IAM User Permissions Effect: Allow Principal: AWS: !</description></item><item><title>AWS CloudformationをAWS CLIから使ってみる</title><link>https://techteco.github.io/2018/01/25/cloudformation/</link><pubDate>Thu, 25 Jan 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/25/cloudformation/</guid><description>公式ドキュメント AWS CLI Command Reference cloudformation 基本的な使い方 事前準備 実行パス設定 $ CF_PATH=file://~/cfsample AWS CLIのprofileを指定（複数設定している場合） 必要に応じて、AWS CLIのprofileを指定
確認方法は、
cat ~/.aws/credentials cat ~/.aws/config 必要に応じて設定する
export AWS_DEFAULT_PROFILE=XXXXX 共通項目の設定 ここでは、
serviceというタグにsampleと設定する 共通のprefixとして**cfsample-**をつける $ CF_TAG_KEY=service $ CF_TAG_NAME=sample $ CF_STACK_NAME_PREFIX=cfsample- サンプル サンプルとして、S3にsampleのbucketを作成してみる
S3.yaml
AWSTemplateFormatVersion: &amp;#34;2010-09-09&amp;#34; Description: &amp;#34;Cloudformation Sample : Create Sample S3 Bucket&amp;#34; Parameters: pStackNamePrefic: Description: &amp;#34;Common stack name prefix&amp;#34; Type: String Default: &amp;#34;&amp;#34; pBucketName: Description: &amp;#34;Bucket Name&amp;#34; Type: String Resources: Bucket: Type: &amp;#34;AWS::S3::Bucket&amp;#34; DeletionPolicy: Retain Properties: BucketName: !</description></item><item><title>待望のAWS LambdaのGolang対応！</title><link>https://techteco.github.io/2018/01/24/lambda-go-sample/</link><pubDate>Wed, 24 Jan 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/24/lambda-go-sample/</guid><description>公式ドキュメント Announcing Go Support for AWS Lambda Programming Model for Authoring Lambda Functions in Go サンプル Lambda Function Handler (Go)を読んで、サンプルを動かしてみる
前提 実行環境 $ go version go version go1.9.3 darwin/amd64 サンプルコード 適当なディレクトリを作成して、main.goという名前でサンプルをそのまま貼り付ける。
$ mkdir lambda-go-sample $ cd lambda-go-sample/ main.go package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34; ) type MyEvent struct { Name string `json:&amp;#34;name&amp;#34;` } func HandleRequest(ctx context.Context, name MyEvent) (string, error) { return fmt.Sprintf(&amp;#34;Hello %s!&amp;#34;, name.Name), nil } func main() { lambda.</description></item><item><title>Golangのバージョン管理GVM(Go Version Manager)の使い方</title><link>https://techteco.github.io/2018/01/23/golang-gvm/</link><pubDate>Tue, 23 Jan 2018 20:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/23/golang-gvm/</guid><description>GVMとは GVM(Github)
Go Version Managerの頭文字をとってGVM
一言で言うと
GVM provides an interface to manage Go versions.
日本語に直訳すると
GVMは、Goバージョンを管理するためのインタフェースを提供します。
インストール AnsibleでMacの開発環境を構築するでも、gvmのインストールはされていますが、コマンドでも一発でインストール可能です。
bash &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) $ gvm version -bash: gvm: command not found おっと、パスが通ってませんでした。。。
$ source ~/.gvm/scripts/gvm $ gvm version Go Version Manager v1.0.22 installed at /Users/XXXXX/.gvm 使い方 gvm list インストール済のGoのバージョン一覧を表示 $ gvm list gvm gos (installed) go1.4 go1.7.6 go1.8.3 =&amp;gt; go1.9.3 system バージョンを表示してみると $ go version go version go1.9.3 darwin/amd64 gvm listall GVMでインストール可能なGoのバージョン一覧を表示 $ gvm listall gvm gos (available) go1 go1.</description></item><item><title>AnsibleでMacの開発環境を構築する</title><link>https://techteco.github.io/2018/01/22/ansible-mac/</link><pubDate>Mon, 22 Jan 2018 20:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/22/ansible-mac/</guid><description>※2018年12月12日更新
定期的にmacのお掃除をしたくなるんですが、クリーンインストールして０から環境構築したいものです。
それ以外にも、PCの新規購入や買い替え、職場のPCが変わったりと、０から開発環境を構築する場面は多々あります。
しかしながら、この環境構築、やることが盛り沢山で大変です。
しかも頻繁にやる作業でもないので結構忘れてしまって、毎回調べながらやってる気がします。
いざ環境構築が終わって開発していると、あれインストールしてないや、あの設定どうだったっけ？
みたいなことは、あるあるですよね。
そこで、今後のことも考えて、macの環境構築をAnsibleを使って自動化（60〜70%くらい）したいと思います。
前提 Ansibleの基本的な知識があること
※参考サイト
Ansible Documentation(official)
実行環境 $ sw_vers ProductName:	Mac OS X ProductVersion:	10.14.1 BuildVersion:	18B75 手順 Macのクリーンインストール（ここでは省略） ※参考サイト
macOS を消去して再インストールする
Homebrewのインストール Homebrew公式
$ /usr/bin/ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34; $ brew -v Homebrew 1.8.5 MacにAnsibleをインストール ここでは、brewコマンドを使ってAnsibleをインストール
$ brew install ansible $ ansible --version ansible 2.7.4 ファイル構成 tree コマンドで表示するとこんな感じです。
Ansible利用したことある方なら特に違和感ないと思います。
$ tree . ├── README.md ├── localhost ├── roles │ ├── awscli │ │ ├── tasks │ │ │ └── main.</description></item><item><title>2017年まとめ</title><link>https://techteco.github.io/2017/12/30/2017/</link><pubDate>Sat, 30 Dec 2017 07:45:00 +0900</pubDate><guid>https://techteco.github.io/2017/12/30/2017/</guid><description>2017年まとめ 総括をするほどのことをしてないのですが、とにかく４月以降更新できなかったことに対して猛省中。
ネタ的には、今年の後半は初めてAzureに触る機会があって、とくにActive Directory B2Cで苦戦した。
2018年に向けて とにかくServerlessがどんどん進んで行くと思うので、その辺の流れについていくこと
フロントエンド周りの開発も整理して、新しい技術についていくこと
iOS、Androidのネイティブアプリもなんか作れたら作る。。。</description></item><item><title>DynamoDBをAWS CLIで操作してみる（アイテム操作）</title><link>https://techteco.github.io/2017/04/25/dynamodb-usage-item/</link><pubDate>Tue, 25 Apr 2017 06:30:00 +0900</pubDate><guid>https://techteco.github.io/2017/04/25/dynamodb-usage-item/</guid><description>公式ドキュメント AWS CLI Command Reference dynamodb 前提 DynamoDBローカルを使ってみるが完了している
DynamoDBをAWS CLIで操作してみる（テーブル操作）が完了している
参考 コマンドリファレンス aws dynamodb put-item aws dynamodb get-item aws dynamodb update-item aws dynamodb delete-item aws dynamodb batch-write-item aws dynamodb batch-get-item 事前準備 作業用ディレクトリへ移動 $ cd ~/dynamodbwork テーブル作成 定義用jsonファイル $ more ./json/musicTableDefinition.json { &amp;#34;TableName&amp;#34;: &amp;#34;Music&amp;#34;, &amp;#34;AttributeDefinitions&amp;#34;: [ { &amp;#34;AttributeName&amp;#34;: &amp;#34;Artist&amp;#34;, &amp;#34;AttributeType&amp;#34;: &amp;#34;S&amp;#34; }, { &amp;#34;AttributeName&amp;#34;: &amp;#34;SongTitle&amp;#34;, &amp;#34;AttributeType&amp;#34;: &amp;#34;S&amp;#34; } ], &amp;#34;KeySchema&amp;#34;: [ { &amp;#34;KeyType&amp;#34;: &amp;#34;HASH&amp;#34;, &amp;#34;AttributeName&amp;#34;: &amp;#34;Artist&amp;#34; }, { &amp;#34;KeyType&amp;#34;: &amp;#34;RANGE&amp;#34;, &amp;#34;AttributeName&amp;#34;: &amp;#34;SongTitle&amp;#34; } ], &amp;#34;ProvisionedThroughput&amp;#34;: { &amp;#34;WriteCapacityUnits&amp;#34;: 1, &amp;#34;ReadCapacityUnits&amp;#34;: 1 } } $ aws dynamodb \ create-table \ --endpoint-url http://localhost:8000 \ --cli-input-json file://json/musicTableDefinition.</description></item><item><title>DynamoDBをAWS CLIで操作してみる（テーブル操作）</title><link>https://techteco.github.io/2017/04/22/dynamodb-usage-table/</link><pubDate>Sat, 22 Apr 2017 22:30:00 +0900</pubDate><guid>https://techteco.github.io/2017/04/22/dynamodb-usage-table/</guid><description>公式ドキュメント AWS CLI Command Reference dynamodb 前提 DynamoDBローカルを使ってみるが完了している 参考 コマンドリファレンス aws dynamodb list-tables aws dynamodb create-table aws dynamodb describe-table aws dynamodb update-table aws dynamodb delete-table 事前準備 作業用ディレクトリ作成 $ mkdir -p ~/dynamodbwork/json; cd ./dynamodbwork テーブル操作 テーブルのリストを表示する $ aws dynamodb \ list-tables \ --endpoint-url http://localhost:8000 &amp;gt; ./json/list-tables.json $ more ./json/list-tables.json 出力結果のjsonファイル
{ &amp;#34;TableNames&amp;#34;: [] } テーブル作成 定義用jsonファイル $ more ./json/testTableDefinition.json { &amp;#34;TableName&amp;#34;: &amp;#34;testTable&amp;#34;, &amp;#34;AttributeDefinitions&amp;#34;: [ { &amp;#34;AttributeName&amp;#34;: &amp;#34;hash_key_attribute_name&amp;#34;, &amp;#34;AttributeType&amp;#34;: &amp;#34;S&amp;#34; }, { &amp;#34;AttributeName&amp;#34;: &amp;#34;range_key_attribute_name&amp;#34;, &amp;#34;AttributeType&amp;#34;: &amp;#34;S&amp;#34; } ], &amp;#34;KeySchema&amp;#34;: [ { &amp;#34;KeyType&amp;#34;: &amp;#34;HASH&amp;#34;, &amp;#34;AttributeName&amp;#34;: &amp;#34;hash_key_attribute_name&amp;#34; }, { &amp;#34;KeyType&amp;#34;: &amp;#34;RANGE&amp;#34;, &amp;#34;AttributeName&amp;#34;: &amp;#34;range_key_attribute_name&amp;#34; } ], &amp;#34;ProvisionedThroughput&amp;#34;: { &amp;#34;WriteCapacityUnits&amp;#34;: 5, &amp;#34;ReadCapacityUnits&amp;#34;: 5 } } $ aws dynamodb \ create-table \ --endpoint-url http://localhost:8000 \ --cli-input-json file://json/testTableDefinition.</description></item><item><title>DynamoDBローカルを使ってみる</title><link>https://techteco.github.io/2017/04/22/dynamodb-local-setup/</link><pubDate>Sat, 22 Apr 2017 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2017/04/22/dynamodb-local-setup/</guid><description>公式ドキュメント DynamoDB ローカル (ダウンロード可能バージョン) のセットアップ 前提 AWS CLIの設定とJavaが導入済み $ aws --version aws-cli/1.11.76 Python/2.7.10 Darwin/16.5.0 botocore/1.5.39 $ java -version java version &amp;#34;1.8.0_121&amp;#34; Java(TM) SE Runtime Environment (build 1.8.0_121-b13) Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode) ダウンロード $ cd your_path $ mkdir dynamodb_local_latest $ curl -sL https://s3-ap-northeast-1.amazonaws.com/dynamodb-local-tokyo/dynamodb_local_latest.tar.gz | tar zx -C your_path/dynamodb_local_latest 実行 $ java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb Initializing DynamoDB Local with the following configuration: Port:	8000 InMemory:	false DbPath:	null SharedDb:	true shouldDelayTransientStatuses:	false CorsParams:	* 実行オプション -cors value JavaScript で CORS (Cross-Origin Resource Sharing) のサポートを有効にします。特定のドメインのカンマ区切りの &amp;ldquo;許可&amp;rdquo; リストを指定する必要があります。 -cors のデフォルト設定は、パブリックアクセスを許可するアスタリスク（*）です。</description></item><item><title>AWS CLIでCloudfrontのキャッシュクリア</title><link>https://techteco.github.io/2017/04/09/cloudfront-create-invalidation/</link><pubDate>Sun, 09 Apr 2017 11:10:00 +0900</pubDate><guid>https://techteco.github.io/2017/04/09/cloudfront-create-invalidation/</guid><description>公式ドキュメント AWS CLI Command Reference AWS CLI コマンドの実行 頻度とかファイル数にもよるけど、とりあえずざっくり全クリア。
XXXXXXXXXXXXXXはdistribution-id、確認方法はこちらで。 $ aws cloudfront list-distributions $ aws cloudfront create-invalidation --distribution-id XXXXXXXXXXXXXX --paths &amp;#39;/*&amp;#39; AWS CLI support for this service is only available in a preview stage. However, if you&amp;#39;d like to use the &amp;#34;aws cloudfront&amp;#34; commands with the AWS CLI, you can enable this service by adding the following to your CLI config file: [preview] cloudfront=true or by running: aws configure set preview.</description></item><item><title>オレオレSSL証明書</title><link>https://techteco.github.io/2017/03/08/oreoressl/</link><pubDate>Wed, 08 Mar 2017 08:00:00 +0900</pubDate><guid>https://techteco.github.io/2017/03/08/oreoressl/</guid><description>オレオレSSL証明書 情報はググれば沢山でてくるので割愛。 久々につくる機会があったので手順を自分用にメモ。
秘密鍵の作成 $ openssl genrsa -aes256 -out ./server.key 2048 Generating RSA private key, 2048 bit long modulus ..............................................................&amp;#43;&amp;#43;&amp;#43; .......&amp;#43;&amp;#43;&amp;#43; unable to write &amp;#39;random state&amp;#39; e is 65537 (0x10001) Enter pass phrase for ./server.key: Verifying - Enter pass phrase for ./server.key: CSRの作成 $ openssl req -new -sha256 -key ./server.key -out ./server.csr Enter pass phrase for ./server.key: You are about to be asked to enter information that will be incorporated into your certificate request.</description></item><item><title>lumenを試してみる</title><link>https://techteco.github.io/2017/02/15/lumen-install/</link><pubDate>Wed, 15 Feb 2017 08:00:00 +0900</pubDate><guid>https://techteco.github.io/2017/02/15/lumen-install/</guid><description>Lumenとは Limenのオフィシャルページ
The stunningly fast micro-framework by Laravel.
直訳すると、&amp;ldquo;Laravelによるほどろくほど高速なマイクロフレームワーク&amp;quot;ってことですね。
現時点（2017年2月14日）では、バージョン5.4が最新のようです。 Limen Documentation
laravel5.2は使ったあるので、そこまで苦労しないで使えるはず。。
Limenを試してみる ここに書いてあるとおりやってみる Limen Installation
環境 mac OS 10.12.3 $ php -v PHP 7.1.1 (cli) (built: Jan 21 2017 13:36:56) ( NTS ) Copyright (c) 1997-2017 The PHP Group Zend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies $ composer -V Composer version 1.3.2 2017-01-27 18:23:41 $ openssl version OpenSSL 0.9.8zh 14 Jan 2016 $ php -m | grep -i pdo PDO pdo_mysql PDO_ODBC pdo_sqlite $ php -m | grep -i mbstring mbstring $ ComposerでLumen installerをインストール $ composer global require &amp;#34;laravel/lumen-installer&amp;#34; Changed current directory to /Users/hoge/.</description></item><item><title>ansibleでsshdの設定</title><link>https://techteco.github.io/2016/12/08/ansible-sshd/</link><pubDate>Thu, 08 Dec 2016 17:00:00 +0900</pubDate><guid>https://techteco.github.io/2016/12/08/ansible-sshd/</guid><description>前提 ここまで終わってること
ansible実行用のhostをvagrantのansible_localで設定 hostからansibleでcentOS 7.2の基本設定 やること ansibleでsshdの設定 ansible実行で設定反映 sshdの起動確認 1.ansibleでsshdの設定 ファイル構成 $ tree . ├── Vagrantfile ├── ansible.cfg └── provision ├── development ├── group_vars │ └── web.yml ├── host ├── roles │ ├── CentOS7.2 │ │ ├── handlers │ │ │ └── main.yml &amp;lt;&amp;lt;&amp;lt;&amp;lt; 変更 │ │ ├── tasks │ │ │ ├── chrony.yml │ │ │ ├── env.yml │ │ │ ├── locale.yml │ │ │ ├── main.yml &amp;lt;&amp;lt;&amp;lt;&amp;lt; 変更 │ │ │ ├── selinux.</description></item><item><title>Vagrant+VirtualBox+Ansibleで開発環境を構築する（その２）</title><link>https://techteco.github.io/2016/11/29/vagrant-ansible-local-2/</link><pubDate>Tue, 29 Nov 2016 20:00:00 +0900</pubDate><guid>https://techteco.github.io/2016/11/29/vagrant-ansible-local-2/</guid><description>ansible実行用のhostをvagrantのansible_localで設定 hostからansibleでcentOS 7.2の基本設定 ← ここ 前提 OS X El Capitan(10.11.6)
Vagrantインストール済み
$ vagrant version Installed Version: 1.8.7 Latest Version: 1.8.7 VirtualBoxインストール済み ※前回からバージョンアップ
$ VBoxManage -version 5.1.10r112026 2.hostからansibleでcentOS 7.2の基本設定 ansibleのBest Practicesを参考に、以下のファイル構成で準備する。
ファイル構成 $ tree . ├── Vagrantfile ├── ansible.cfg └── provision ├── development ├── group_vars │ └── web.yml ├── host ├── roles │ ├── CentOS7.2 │ │ ├── handlers │ │ │ └── main.yml │ │ ├── tasks │ │ │ ├── chrony.</description></item><item><title>Vagrant+VirtualBox+Ansibleで開発環境を構築する（その１）</title><link>https://techteco.github.io/2016/11/28/vagrant-ansible-local-1/</link><pubDate>Mon, 28 Nov 2016 08:10:00 +0900</pubDate><guid>https://techteco.github.io/2016/11/28/vagrant-ansible-local-1/</guid><description>ansible実行用のhostをvagrantのansible_localで設定 ← ここ hostからansibleでcentOS 7.2の基本設定 前提 OS X El Capitan(10.11.6)
Vagrantインストール済み
$ vagrant version Installed Version: 1.8.7 Latest Version: 1.8.7 VirtualBoxインストール済み $ VBoxManage -version 5.0.30r112061 1.ansible実行用のhostをvagrantのansible_localで設定 vagrantの初期化 Vagrantfile作成 $ vagrant init A `Vagrantfile` has been placed in this directory. You are now ready to `vagrant up` your first virtual environment! Please read the comments in the Vagrantfile as well as documentation on `vagrantup.com` for more information on using Vagrant. $ tree .</description></item><item><title>【メモ】AWS CLIをつかってS3にファイルアップロード</title><link>https://techteco.github.io/2016/11/22/s3-sync/</link><pubDate>Tue, 22 Nov 2016 08:10:00 +0900</pubDate><guid>https://techteco.github.io/2016/11/22/s3-sync/</guid><description>AWS CLIをつかってS3にファイルアップロード hugoで出力されたファイルをS3にアップするコマンドのメモ 前提 awscliでインストール済 対象のバケットのアクセスポリシー設定済 コマンド public配下を、公開用のS3バケットにsyncする
$ aws s3 sync ~/techte.co/public/ s3://techte.co --exact-timestamps 同期したくないファイルを除外するには、&amp;ndash;excludeオプションをつける 下の例は、.から始まる隠しファイルや.gitなどを除外する
$ aws s3 sync ~/techte.co/public/ s3://techte.co --exact-timestamps --exclude &amp;#34;.*&amp;#34;</description></item><item><title>【メモ】Hugoの基本的な使い方</title><link>https://techteco.github.io/2016/11/22/hugo-install/</link><pubDate>Tue, 22 Nov 2016 07:45:00 +0900</pubDate><guid>https://techteco.github.io/2016/11/22/hugo-install/</guid><description>Hugoの基本的な使い方メモ bloggerからhugoに移行にしたので、簡単に使い方のメモ 環境 OS X El Capitan 10.11.6 Homebrew設定済み golangインストール済み $ go version go version go1.7.3 darwin/amd64 インストール $ brew install hugo プロジェクト作成 $ hugo new site co.techte テーマ適用(HugoMDL) このサイトで使ったテーマ
$ cd co.techte/themes/ $ git clone https://github.com/jchatkinson/HugoMDL プレビュー $ hugo server --watch --buildDrafts ビルド $ hugo</description></item><item><title>MacにAWS CLIインストール</title><link>https://techteco.github.io/2016/11/19/aws-cli-install/</link><pubDate>Sat, 19 Nov 2016 20:11:00 +0900</pubDate><guid>https://techteco.github.io/2016/11/19/aws-cli-install/</guid><description>MacにAWS CLIインストール AWS 公式：Installing the AWS Command Line Interface AWS 公式：Configuring the AWS Command Line Interface インストールスクリプト pip のウェブサイトからインストールスクリプトをダウンロードし実行します。
$ curl &amp;#34;https://bootstrap.pypa.io/get-pip.py&amp;#34; -o &amp;#34;get-pip.py&amp;#34; $ pip -V pip 8.1.2 from /usr/local/lib/python2.7/site-packages (python 2.7) $ sudo python get-pip.py AWS CLI インストール $ sudo pip install awscli $ aws --version aws-cli/1.11.13 Python/2.7.12 Darwin/15.6.0 botocore/1.4.70 AWS CLI 設定 $ aws configure AWS Access Key ID [None]: AK********************** AWS Secret Access Key [None]: wJa**************************** Default region name [None]: us-west-2 Default output format [None]: ENTER 設定ファイル</description></item><item><title>【FuelPHP】ログの出力先を変更する</title><link>https://techteco.github.io/2016/01/07/fuelphp-log/</link><pubDate>Thu, 07 Jan 2016 13:11:00 +0900</pubDate><guid>https://techteco.github.io/2016/01/07/fuelphp-log/</guid><description>【FuelPHP】ログの出力先を変更する FuelPHPを使い始めて２年以上経ちましたが、デフォルトのログ出力が使いづらいなと思いつつ放置してたのをようやく変更。といっても、とっても簡単でした。
公式サイト FuelPHP この時点での最新版は1.72ですね。
FuelPHPのlog出力先の設定 log出力先の作成 logrotateの設定 FuelPHPのlog出力先の設定 app/config/config.phpに２行追加するだけです
&amp;#39;log_path&amp;#39; =&amp;gt; &amp;#39;/var/log/fuelphp/&amp;#39;, &amp;#39;log_file&amp;#39; =&amp;gt; &amp;#39;fuelphp.log&amp;#39;, 実行したら、怒られた。事前にファイルパス作っておかないダメデスね。
Fuel\Core\FuelException [ Error ]: Unable to create or write to the log file. Please check the permissions on /var/log/fuelphp/. (mkdir(): 許可がありません) log出力先の作成 普通に、ディレクトリ作ってパーミッションとか設定する。※例は、nginxで動作している環境
$ sudo mkdir /var/log/fuelphp $ sudo chown nginx:nginx /var/log/fuelphp $ sudo chmod 775 /var/log/fuelphp $ ll | grep fuelphp drwxrwxr-x 2 nginx nginx 24 1月 7 13:08 fuelphp logrotateの設定 このままだとlogがパンクしてしまうので、logrotateの設定もしておく /etc/logrotate.</description></item><item><title>【メモ】MACにwgetをインストール</title><link>https://techteco.github.io/2015/09/28/mac-wget/</link><pubDate>Mon, 28 Sep 2015 22:29:00 +0900</pubDate><guid>https://techteco.github.io/2015/09/28/mac-wget/</guid><description>wgetをインストール 今更ながらmacにwgetが入ってないことに気づく。。 とういうわけで、macにwgetをインストールしてみる
公式サイト wget この時点での最新版は1.16ですね。
インストール手順 $ cd /tmp $ curl -O http://ftp.gnu.org/pub/gnu/wget/wget-1.16.tar.gz $ tar xvzf wget-1.16.tar.gz $ cd wget-1.16 $ sudo ./configure --with-ssl=openssl $ sudo make $ sudo make install インストール確認 $ which wget /usr/local/bin/wget</description></item><item><title>【小ネタ】簡単に連番のディレクトリを作る方法</title><link>https://techteco.github.io/2015/09/10/seq-dir/</link><pubDate>Thu, 10 Sep 2015 18:05:00 +0900</pubDate><guid>https://techteco.github.io/2015/09/10/seq-dir/</guid><description>連番のディレクトリを作成 作業用に、とにかく連番でディレクトリを作りたいことがあって、便利なコマンドさがしてたらとても簡単んだったのでメモ。 1から10までのディレクトリを作る場合
コマンド $ mkdir {1..10} 実行結果 $ tree ./ ./ ├── 1 ├── 10 ├── 2 ├── 3 ├── 4 ├── 5 ├── 6 ├── 7 ├── 8 └── 9 10 directories, 0 files</description></item><item><title>gulpでtypescriptから出力されたjavascriptをminifyする</title><link>https://techteco.github.io/2015/09/04/gulp-minify-js/</link><pubDate>Fri, 04 Sep 2015 12:00:00 +0900</pubDate><guid>https://techteco.github.io/2015/09/04/gulp-minify-js/</guid><description>jsファイルをminifyするためのgulup設定 前回作成した、typescript環境にjavascriptのminifyを追加してみる。ついでに、npm installも試してみる
前回 gulpでtypescript環境を構築する package.json 新しいプロジェクトディレクトリを作成して、そこに前回利用したpackage.jsonを置く
$ ls package.json npm installでモジュールをインストール npm installを実行すると、package.jsonの内容から、必要なモジュールがインストールされる
$ npm install こんな感じでインストールされている
$ tree -L 2 . ├── node_modules │ ├── gulp │ ├── gulp-typescript │ ├── gulp-watch │ └── require-dir └── package.json 5 directories, 1 file あとは、前回作成したモジュール以外のファイルを持ってくる
gulp-uglify javascriptファイルをminifyするための、gulp-uglifyをインストールする
npm gulp-uglify $ npm install --save-dev gulp-uglify /gulp/tasks/tsc.jsの内容 前回作成したtsc.jsを以下のように編集する
var gulp = require(&amp;#34;gulp&amp;#34;); var ts = require(&amp;#34;gulp-typescript&amp;#34;); var uglify = require(&amp;#39;gulp-uglify&amp;#39;); var config = require(&amp;#34;.</description></item><item><title>gulpでtypescript環境を構築する</title><link>https://techteco.github.io/2015/09/02/gulp-typescript/</link><pubDate>Wed, 02 Sep 2015 17:22:00 +0900</pubDate><guid>https://techteco.github.io/2015/09/02/gulp-typescript/</guid><description>typescriptをやってみる 公式サイト typescript typescriptでも触ってみようということで、gulpで環境をつくってみます
ゴールは、
tsファイルを監視して、ファイルが更新されたら、コンパイルしてjsファイルを出力する 構築 package.jsonを作成 npm init コマンドでpackage.jsonのひな形を作成。入力内容は適当に。
$ npm init とりあえず、こんな感じにしておく。
{ &amp;#34;name&amp;#34;: &amp;#34;gulp_typescript&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;gulp for typescript&amp;#34;, &amp;#34;main&amp;#34;: &amp;#34;gulpfile.js&amp;#34;, &amp;#34;scripts&amp;#34;: { &amp;#34;test&amp;#34;: &amp;#34;echo \&amp;#34;Error: no test specified\&amp;#34; &amp;amp;&amp;amp; exit 1&amp;#34; } } gulpをローカルにインストール ローカルイントールで、&amp;ndash;save-devオプションでpackage.jsonを更新する
$ npm install --save-dev gulp gulpfile.jsを作成 タスクをファイル分割して管理出来るようにrequire-dirをインストール
npm require-dir $ npm install --save-dev require-dir gulpfile.js
var dir = require(&amp;#39;require-dir&amp;#39;); dir(&amp;#39;./gulp/tasks&amp;#39;, { recurse: true }); default.jsを作成 gulpコマンド実行時に最初に読み込むタスクファイル gulpのタスクを保存していく ./gulp/tasks とtypescript用 .</description></item><item><title>最近、話題？のbrowserifyを触ってみる</title><link>https://techteco.github.io/2015/08/28/try-browserify/</link><pubDate>Fri, 28 Aug 2015 11:16:00 +0900</pubDate><guid>https://techteco.github.io/2015/08/28/try-browserify/</guid><description>browserifyでhello world 最近、話題？のbrowserifyを触ってみる。 とりあえず、公式サイトのhello worldを試してみることに
公式サイト Browserify browserifyをインストール browserifyをglobalにインストール
$ npm install -g browserify サンプルで動かすjavascript main.js var unique = require(&amp;#39;uniq&amp;#39;); var data = [1, 2, 2, 3, 4, 5, 5, 5, 6]; console.log(unique(data)); サンプルで利用するuniqモジュールをインストール $ npm install --save--dev uniq bundle.jsを出力 $ browserify main.js -o bundle.js 出力されたbundle.jsの中はこんな感じ。
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==&amp;#34;function&amp;#34;&amp;amp;&amp;amp;require;if(!u&amp;amp;&amp;amp;a)return a(o,!0);if(i)return i(o,!0);var f=new Error(&amp;#34;Cannot find module &amp;#39;&amp;#34;&amp;#43;o&amp;#43;&amp;#34;&amp;#39;&amp;#34;);throw f.code=&amp;#34;MODULE_NOT_FOUND&amp;#34;,f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==&amp;#34;function&amp;#34;&amp;amp;&amp;amp;require;for(var o=0;o&amp;lt;r.length;o&amp;#43;&amp;#43;)s(r[o]);return s})({1:[function(require,module,exports){ var unique = require(&amp;#39;uniq&amp;#39;); var data = [1, 2, 2, 3, 4, 5, 5, 5, 6]; console.</description></item><item><title>Macでgulpを動かそう #3 gulpをインストール</title><link>https://techteco.github.io/2015/08/27/macgulp3/</link><pubDate>Thu, 27 Aug 2015 15:10:00 +0900</pubDate><guid>https://techteco.github.io/2015/08/27/macgulp3/</guid><description>nodebrewをインストール node.jsをインストール gulpをインストール ← ここ 3. gulpをインストール gulpは、npmを使ってインストールする
公式サイト gulp 公式サイト npm npm npmは、node.jsインストール時に、同時にインストールされている
npmのバージョン確認 $ npm version { npm: &amp;#39;2.11.3&amp;#39;, http_parser: &amp;#39;2.3&amp;#39;, modules: &amp;#39;14&amp;#39;, node: &amp;#39;0.12.7&amp;#39;, openssl: &amp;#39;1.0.1p&amp;#39;, uv: &amp;#39;1.6.1&amp;#39;, v8: &amp;#39;3.28.71.19&amp;#39;, zlib: &amp;#39;1.2.8&amp;#39; } npmを最新に更新する $ npm upgrade -g npm $ npm version { npm: &amp;#39;2.14.0&amp;#39;, http_parser: &amp;#39;2.3&amp;#39;, modules: &amp;#39;14&amp;#39;, node: &amp;#39;0.12.7&amp;#39;, openssl: &amp;#39;1.0.1p&amp;#39;, uv: &amp;#39;1.6.1&amp;#39;, v8: &amp;#39;3.28.71.19&amp;#39;, zlib: &amp;#39;1.2.8&amp;#39; } $ gulp 公式サイト gulp(GitHub) npmでgulpをインストール $ npm install --global gulp $ npm install --save-dev gulp $ gulp -v [15:10:53] CLI version 3.</description></item><item><title>Macでgulpを動かそう #2 node.jsをインストール</title><link>https://techteco.github.io/2015/08/27/macgulp2/</link><pubDate>Thu, 27 Aug 2015 14:55:00 +0900</pubDate><guid>https://techteco.github.io/2015/08/27/macgulp2/</guid><description> nodebrewをインストール node.jsをインストール ← ここ gulpをインストール 2. node.jsをインストール 公式サイト node.js 最新バージョンをインストール バージョンは、latestを指定することで最新版をインストールする。 インストール後は、lsでバージョン確認
$ nodebrew install latest $ nodebrew ls v0.12.7 current: none $ currentの指定 インストールしただけだと、current: noneとなっているように、使えません
$ nodebrew use v0.12.7 use v0.12.7 $ node -v v0.12.7 $</description></item><item><title>Macでgulpを動かそう #1 nodebrewをインストール</title><link>https://techteco.github.io/2015/08/27/macgulp1/</link><pubDate>Thu, 27 Aug 2015 14:11:00 +0900</pubDate><guid>https://techteco.github.io/2015/08/27/macgulp1/</guid><description> nodebrewをインストール ← ここ node.jsをインストール gulpをインストール 1. nodebrewをインストール インストールの細かい手順は、公式サイトに詳しく書いてあるので、ざっくりと。
公式サイト PATHを設定 .bashrcに下記のとおりPATHを設定する
$ export PATH=$HOME/.nodebrew/current/bin:$PATH 設定の反映 $ source ~/.bashrc 使い方 $ nodebrew help</description></item><item><title>Macにtreeコマンドをいれる</title><link>https://techteco.github.io/2015/08/26/mac-tree-command/</link><pubDate>Wed, 26 Aug 2015 21:53:00 +0900</pubDate><guid>https://techteco.github.io/2015/08/26/mac-tree-command/</guid><description>treeコマンド コマンドでディレクトリ構造を表示する方法さがしてたら、便利なのがありました。ていうか、知らないのが恥ずかしいレベルなのか。。
インストール macにbrewを使ってインストールする
$ brew install tree $ tree --version tree v1.7.0 (c) 1996 - 2014 by Steve Baker, Thomas Moore, Francesc Rocher, Florian Sesser, Kyosuke Tokoro 簡単な使い方 表示したいpathに移動して
$ tree . ├── test1 │ └── test.txt ├── test2 │ └── test.txt └── test3 └── test.txt 3 directories, 3 files</description></item><item><title>とりあえずBloggerにSyntaxHighlighterを導入してみた。</title><link>https://techteco.github.io/2015/08/26/bloggersyntaxhighlighter/</link><pubDate>Wed, 26 Aug 2015 17:08:00 +0900</pubDate><guid>https://techteco.github.io/2015/08/26/bloggersyntaxhighlighter/</guid><description>SyntaxHighlighter SyntaxHighlighter公式サイト 導入方法 いろいろ探したら、stackoverflowの記事が良さげで試したみた。
stackoverflow: how to setup syntax highlighter on blogger 一番上の手順もやってみたが、古い（対応言語が少ない）ので、２番めのリンクの先のを試してみたら、これがよかった。
How do I add syntax highlighting to my Blogger blog? ざっくり書いてしまうと、HTML編集モードにして、
&amp;lt;/head&amp;gt; の直前に下記をコピペしてね、です。
&amp;lt;!-- Syntax Highlighter Additions START --&amp;gt; &amp;lt;link href=&amp;#34;http://alexgorbatchev.com/pub/sh/current/styles/shCore.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; /&amp;gt; &amp;lt;link href=&amp;#34;http://alexgorbatchev.com/pub/sh/current/styles/shThemeEmacs.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; /&amp;gt; &amp;lt;script src=&amp;#34;http://alexgorbatchev.com/pub/sh/current/scripts/shCore.js&amp;#34; type=&amp;#34;text/javascript&amp;#34; /&amp;gt; &amp;lt;script src=&amp;#34;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushAS3.js&amp;#34; type=&amp;#34;text/javascript&amp;#34; /&amp;gt; &amp;lt;script src=&amp;#34;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushBash.js&amp;#34; type=&amp;#34;text/javascript&amp;#34; /&amp;gt; &amp;lt;script src=&amp;#34;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushColdFusion.js&amp;#34; type=&amp;#34;text/javascript&amp;#34; /&amp;gt; &amp;lt;script src=&amp;#34;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushCSharp.js&amp;#34; type=&amp;#34;text/javascript&amp;#34; /&amp;gt; &amp;lt;script src=&amp;#34;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushCpp.js&amp;#34; type=&amp;#34;text/javascript&amp;#34; /&amp;gt; &amp;lt;script src=&amp;#34;http://alexgorbatchev.com/pub/sh/current/scripts/shBrushCss.js&amp;#34; type=&amp;#34;text/javascript&amp;#34; /&amp;gt; &amp;lt;script src=&amp;#34;http://alexgorbatchev.</description></item></channel></rss>