<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GOLANG on TechTeco</title><link>https://techteco.github.io/categories/golang/</link><description>Recent content in GOLANG on TechTeco</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Fri, 09 Feb 2018 22:00:00 +0900</lastBuildDate><atom:link href="https://techteco.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>LambdaのGolangでS3を操作する</title><link>https://techteco.github.io/2018/02/09/lambda-go-s3/</link><pubDate>Fri, 09 Feb 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/02/09/lambda-go-s3/</guid><description>やること S3に保存されたファイルを取得して、データを追記して保存する
S3上のファイル存在確認(ListObjectsV2)
ファイルが存在すれば、ファイル取得(GetObject)
追記してS3に保存(PutObject)
Lambdaの作成 さっそく
golang main.go package main import ( &amp;#34;bytes&amp;#34; &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws/awserr&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws/endpoints&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws/session&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/service/s3&amp;#34; ) func HandleRequest(ctx context.Context) (string, error) { var BUCKET = os.Getenv(&amp;#34;BUCKET&amp;#34;) var KEY = os.Getenv(&amp;#34;KEY&amp;#34;) svc := s3.New(session.New(), &amp;amp;aws.Config{ Region: aws.String(endpoints.ApNortheast1RegionID), }) // ファイルの存在確認 loo, errlo := svc.ListObjectsV2(&amp;amp;s3.ListObjectsV2Input{ Bucket: aws.String(BUCKET), Prefix: aws.String(KEY), }) if errlo != nil { if aerr, ok := errlo.(awserr.Error); ok { switch aerr.</description></item><item><title>Lambda(Golang)からAWS KMSを復号化する方法</title><link>https://techteco.github.io/2018/01/30/lambda-go-kms/</link><pubDate>Tue, 30 Jan 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/30/lambda-go-kms/</guid><description>KMSについては、AWS KMSの使い方を参考
環境構築 暗号化データ 暗号化する。ここでは、shared(alias)というkeyを使う。
※自分の環境に合わせて。
$ aws kms encrypt \ --key-id alias/shared \ --plaintext &amp;#34;I am seacret word&amp;#34; \ --output text \ --query CiphertextBlob ここで出力された値をLambdaの環境変数に渡します。
Lambda構築用のSAMテンプレート 参考はこちらのAWS SAMを使ってみるをご確認ください。
lambda-go-kms.yaml AWSTemplateFormatVersion : &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Description: KMS decrypt. Resources: KMSDecrypt: Type: AWS::Serverless::Function Properties: Handler: main Runtime: go1.x CodeUri: main.zip # KMSのDecrypt用のポリシー定義 Policies: - KMSDecryptPolicy: # 暗号化に使ったKeyID # aliasは対応していない KeyId: &amp;#34;01234567-0123-1234-1234-123456789012&amp;#34; Environment: Variables: # Encrypted: &amp;#34;ここに暗号化したCiphertextBlobの値&amp;#34; Golangのソースコード main.go package main import ( &amp;#34;context&amp;#34; &amp;#34;encoding/base64&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.</description></item><item><title>LambdaのGolangでSlackにメッセージを送る</title><link>https://techteco.github.io/2018/01/28/lambda-go-slack/</link><pubDate>Sun, 28 Jan 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/28/lambda-go-slack/</guid><description>Slackの設定 Incoming WebHooks Incoming WebHooksを使って、Lambdaからメッセージ送信をする。
詳細は割愛しますが、ドキュメント [Slack API] (https://api.slack.com/incoming-webhooks) をみると使い方は簡単です。
Slackの管理画面https://XXXXXXXX.slack.com/appsからIncoming WebHooksの設定を行い、Webhook URLが取得できたら、curlコマンドでテストしてみる。
$ curl -X POST -H &amp;#39;Content-type: application/json&amp;#39; \ --data &amp;#39;{&amp;#34;text&amp;#34;:&amp;#34;This is a line of text.\nAnd this is another one.&amp;#34;}&amp;#39; \ https://hooks.slack.com/services/000000000/000000000/XXXXXXXXXXXXXXXXXXXXXXXX こんな感じで送信されれば準備OK！
Lambdaの作成 golang Lambdaの環境変数からSlackのWebhook URLを取得する
main.go package main import ( &amp;#34;context&amp;#34; &amp;#34;os&amp;#34; slack &amp;#34;./slack&amp;#34; &amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34; ) func HandleRequest(ctx context.Context) (string, error) { var slackURL = os.Getenv(&amp;#34;slackURL&amp;#34;) // Get Environment Variables sl := slack.NewSlack(slackURL, &amp;#34;This is a line of text.</description></item><item><title>AWS SAMを使ってみる</title><link>https://techteco.github.io/2018/01/27/lambda-go-sample-sam/</link><pubDate>Sat, 27 Jan 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/27/lambda-go-sample-sam/</guid><description>AWS SAMとは Github : AWS Serverless Application Model (AWS SAM)
The goal of AWS SAM is to define a standard application model for serverless applications. This GitHub project is the starting point for AWS SAM, and contains general information, information about the model, and examples of common applications.
日本語訳
AWS SAMの目標は、サーバレスアプリケーション用の標準アプリケーションモデルを定義することです。 このGitHubプロジェクトは、AWS SAMの出発点であり、一般的な情報、モデルに関する情報、一般的なアプリケーションの例を含んでいます。
AWS::Serverless 変換
ここを見る限りだと、
AWS SAMはCloudformationの拡張で、最終的にはCloudformationのテンプレートに展開されるイメージ。
やること 基本的には、待望のAWS LambdaのGolang対応！ ここでやったことの、コンソールでの作業をコマンドベースでやろう！ということです。
サンプル Githubにサンプルがあるので、一番シンプルなhello_worldを参考にしてみる。
テンプレート lambda-go.yaml AWSTemplateFormatVersion : &amp;#39;2010-09-09&amp;#39; Transform: AWS::Serverless-2016-10-31 Description: lambda go sample application.</description></item><item><title>待望のAWS LambdaのGolang対応！</title><link>https://techteco.github.io/2018/01/24/lambda-go-sample/</link><pubDate>Wed, 24 Jan 2018 22:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/24/lambda-go-sample/</guid><description>公式ドキュメント Announcing Go Support for AWS Lambda Programming Model for Authoring Lambda Functions in Go サンプル Lambda Function Handler (Go)を読んで、サンプルを動かしてみる
前提 実行環境 $ go version go version go1.9.3 darwin/amd64 サンプルコード 適当なディレクトリを作成して、main.goという名前でサンプルをそのまま貼り付ける。
$ mkdir lambda-go-sample $ cd lambda-go-sample/ main.go package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34; ) type MyEvent struct { Name string `json:&amp;#34;name&amp;#34;` } func HandleRequest(ctx context.Context, name MyEvent) (string, error) { return fmt.Sprintf(&amp;#34;Hello %s!&amp;#34;, name.Name), nil } func main() { lambda.</description></item><item><title>Golangのバージョン管理GVM(Go Version Manager)の使い方</title><link>https://techteco.github.io/2018/01/23/golang-gvm/</link><pubDate>Tue, 23 Jan 2018 20:00:00 +0900</pubDate><guid>https://techteco.github.io/2018/01/23/golang-gvm/</guid><description>GVMとは GVM(Github)
Go Version Managerの頭文字をとってGVM
一言で言うと
GVM provides an interface to manage Go versions.
日本語に直訳すると
GVMは、Goバージョンを管理するためのインタフェースを提供します。
インストール AnsibleでMacの開発環境を構築するでも、gvmのインストールはされていますが、コマンドでも一発でインストール可能です。
bash &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) $ gvm version -bash: gvm: command not found おっと、パスが通ってませんでした。。。
$ source ~/.gvm/scripts/gvm $ gvm version Go Version Manager v1.0.22 installed at /Users/XXXXX/.gvm 使い方 gvm list インストール済のGoのバージョン一覧を表示 $ gvm list gvm gos (installed) go1.4 go1.7.6 go1.8.3 =&amp;gt; go1.9.3 system バージョンを表示してみると $ go version go version go1.9.3 darwin/amd64 gvm listall GVMでインストール可能なGoのバージョン一覧を表示 $ gvm listall gvm gos (available) go1 go1.</description></item></channel></rss>